import turtle
import numpy as np

def horiz_on(dist):
    turtle.pendown()
    turtle.forward(dist)
    turtle.penup()
    turtle.forward(dist)

def horiz_off(dist):
    turtle.forward(dist)
    turtle.pendown()
    turtle.forward(dist)
    turtle.penup()
    
def vert_on(dist):
    turtle.seth(90)
    turtle.pendown()
    turtle.forward(dist)
    turtle.penup()
    turtle.forward(dist)
    
def vert_off(dist):
    turtle.seth(90)
    turtle.forward(dist)
    turtle.pendown()
    turtle.forward(dist)
    turtle.penup()
    

#speeding up turtle drawing time
turtle.tracer(0,0)


#User Inputs
distance = 5
stitch_number = 10
screensize = int(distance * stitch_number)


#configuring the screen
turtle.screensize(screensize,screensize)
turtle.setworldcoordinates(0,0,screensize,screensize)


#generating the random lists of values
horiz_arr = np.random.choice([0,1], size=stitch_number)
vert_arr = np.random.choice([0,1], size=stitch_number)

`
#graphing horizontal lines
y=0
for i in horiz_arr:
    if i == 1:
        while turtle.xcor() < screensize:
            horiz_on(distance)
        y += distance
        turtle.setpos(0,y)
    else:
        while turtle.xcor() < screensize:
            horiz_off(distance)
        y += distance
        turtle.setpos(0,y)

#graphing vertical lines
x = 0
for i in vert_arr:
    if i == 1:
        while turtle.ycor() < screensize:
            vert_on(distance)
        x += distance
        turtle.setpos(x,0)
    else:
        while turtle.ycor() < screensize:
            vert_off(distance)
        x += distance
        turtle.setpos(x,0)

        
turtle.update()

if input("exit?(Y/n)") == 'Y':
    turtle.bye()
else:
    pass
